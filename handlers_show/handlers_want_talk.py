from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, PreCheckoutQuery, LabeledPrice
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
from bot.dao.database import db_Ibaza
import logging
import aiosqlite
import keyboards.keyboards_admin as kb_admin
import keyboards.keyboards_main as kb_main
import keyboards.keyboards_shop as kb_shop
from bot.dao.database import (get_user_payments, check_payment, 
                            grant_content_access,)
import time
import os
import asyncio

from pathlib import Path
from handlers_show.__init__ import logger, router
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from data.reg import Video_id_WT, Audio_id_WT, TXT_caption_WT
scheduler = AsyncIOScheduler()
scheduler = None



DB_PROMOKODE = Path('data/promokode.db')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(), logging.FileHandler('bot.log')]
)
logger = logging.getLogger(__name__)




#–ü—Ä–æ—Å–º–æ—Ç—Ä –º–∞–≥–∞–∑–∏–Ω–∞ - [–ö—É–ø–∏—Ç—å –≤–µ–±–∏–Ω–∞—Ä (–ó–∞–ø–∏—Å—å)]
@router.callback_query(F.data == 'Want_talk')
async def Want_talk_show(callback: CallbackQuery, bot: Bot):
    try:
        await callback.answer()
        
        id_file = 'AgACAgIAAxkBAAIQAWid6akv22x06jJKXUAeCqEzUQpjAAJH8TEbVxDwSHUZEgifWJOGAQADAgADeQADNgQ'  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
            
        async with ChatActionSender.upload_photo(
            chat_id=callback.message.chat.id,
            bot=bot
        ):
            await bot.send_photo(
                chat_id=callback.message.chat.id,
                photo=(id_file),
                caption=("–ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ –æ–∑–≤—É—á–∏—Ç—å —Å–≤–æ–µ —Å–∞–º–æ–µ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–µ,"
                        "–∫–∞–∫ —Å–∫–∞–∑–∞—Ç—å –∏–ª–∏ –≤—ã—Å–∫–∞–∑–∞—Ç—å —Ç–æ –±–æ–ª–µ–∑–Ω–µ–Ω–Ω–æ–µ –∏ —Å–ª–æ–∂–Ω–æ–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—Ä–∞–∑—É–µ—Ç —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. "
                        "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º –∫–æ—Ç–æ—Ä—ã–π –≤ –≥–Ω–µ–≤–µ, –∫—Ä–∏—á–∏—Ç –∏–ª–∏ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–±—è —Å–≤–æ–∏–º –º–∞—Å—à—Ç–∞–±–æ–º. "
                        "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–∞–∫, —á—Ç–æ –±—ã –æ–±–Ω—è—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º. "
                        "–ö–∞–∫ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è —Å–æ —Å–≤–æ–µ–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —á–∞—Å—Ç—å—é –∫–æ—Ç–æ—Ä–∞—è –∏–∑–ª–∏—à–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è. "
                        "–¢–æ–≥–¥–∞ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ–π—Ç–∏ –≤ ¬´—Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å¬ª.\n\n"
                        " –¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ —É—á—ë—Ç–∞ —Å–∫–∏–¥–æ–∫."),
                reply_markup=kb_main.want_talk_show_kb
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ Want_talk_show_kb: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
#–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
@router.callback_query(F.data == 'pay_for_content')
async def handle_pay_for_content(callback: CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or "NoUsername"
        base_amount = 500000  # 5000.00 RUB –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        payload = "Want_talk_one"
        payment_id = f"pay_{user_id}_{int(time.time())}"
        used_promo_tag = None
        discount_percent = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        async with aiosqlite.connect(DB_PROMOKODE) as db:
            db.row_factory = aiosqlite.Row
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ
            cursor = await db.execute(
                """SELECT up.tag, pc.percent 
                FROM use_promokode_users up
                JOIN promokode_create pc ON up.tag = pc.tag
                WHERE up.user_id = ? AND up.chapter = 'want_talk'
                LIMIT 1""",
                (user_id,)
            )
            promo = await cursor.fetchone()
            
            if promo:
                used_promo_tag = promo['tag']
                discount_percent = promo['percent']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
                cursor = await db.execute(
                    """SELECT COUNT(*) as usage_count 
                    FROM promocode_usages 
                    WHERE promocode_tag = ?""",
                    (used_promo_tag,)
                )
                usage_data = await cursor.fetchone()
                usage_count = usage_data['usage_count'] if usage_data else 0
                
                cursor = await db.execute(
                    """SELECT max_enteger 
                    FROM promokode_create 
                    WHERE tag = ?""",
                    (used_promo_tag,)
                )
                promo_data = await cursor.fetchone()
                max_usage = promo_data['max_enteger'] if promo_data else 0
                
                if max_usage > 0 and usage_count >= max_usage:
                    # –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                    used_promo_tag = None
                    discount_percent = 0
                    await callback.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", show_alert=True)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        if used_promo_tag and discount_percent > 0:
            discount_amount = int(base_amount * discount_percent / 100)
            final_amount = base_amount - discount_amount
            discount_message = f" (—Å–∫–∏–¥–∫–∞ {discount_percent}%)"
        else:
            final_amount = base_amount
            discount_message = ""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        if used_promo_tag:
            async with aiosqlite.connect(DB_PROMOKODE) as db:
                await db.execute(
                    """INSERT INTO pending_promo_updates 
                    (user_id, promo_tag, payment_id) 
                    VALUES (?, ?, ?)""",
                    (user_id, used_promo_tag, payment_id)
                )
                await db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await bot.send_invoice(
            chat_id=user_id,
            title=f'–ö—É—Ä—Å "–•–û–ß–£ –ì–û–í–û–†–ò–¢–¨"{discount_message}',
            description='–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞',
            payload=payload,
            provider_token='381764678:TEST:129002',
            currency='RUB',
            prices=[LabeledPrice(label='–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É', amount=final_amount)],
            need_email=True
        )
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_pay_for_content: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == 'buy')
async def send_file_from_db(callback: CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    
    if not await check_payment(user_id):
        pay_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", 
                callback_data="pay_for_content"
            )]
        ])
        await callback.message.answer(
            "‚ùå –î–æ—Å—Ç—É–ø –∫ –≤–∏–¥–µ–æ –∑–∞–∫—Ä—ã—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø–ª–∞—Ç–∞ 5000 —Ä—É–±.",
            reply_markup=pay_button
        )
        await callback.answer()
        return
    
    # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –µ—Å—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    file_path = get_user_payments(1)
    max_size_description = "1–π –≤–µ–±–∏–Ω–∞—Ä –•–û–ß–£ –ì–û–í–û–†–ò–¢–¨"
    
    if not file_path or not os.path.exists(file_path):
        await callback.message.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ | 404 | –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    file_size = os.path.getsize(file_path) / (1024 * 1024)
    
    if file_size <= 50:
        async with ChatActionSender.upload_video(
            chat_id=callback.message.chat.id,  
            bot=bot
        ):
            file = FSInputFile(file_path)
            await callback.message.answer_video(file)  
    else:
        try:
            file_id = "BAACAgIAAxkBAAIDOWhiXoFoFPKZf-f8gfBo-1189e6-AAIQeQACgiwRS0EiLJVD7ITfNgQ"
            await bot.send_document(
                chat_id=callback.message.chat.id,  
                document=file_id,
                caption=max_size_description
            )
        except Exception as e:
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e} | –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")  
    
    await callback.answer()  

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ –ª–∏ –ø–ª–∞—Ç—ë–∂–∫–∞
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot) -> None:
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∫–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç
@router.message(F.successful_payment.invoice_payload == "Want_talk_one")
async def process_successful_payment(message: Message, bot: Bot):
    try:
        user_id = message.from_user.id
        
        id_video = Video_id_WT.get('Prevu_want_talk')
        if not id_video:
            await message.answer("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        async with aiosqlite.connect(DB_PROMOKODE) as db:
            db.row_factory = aiosqlite.Row
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cursor = await db.execute(
                """SELECT tag FROM use_promokode_users 
                WHERE user_id = ? AND chapter = 'want_talk'
                LIMIT 1""",
                (user_id,)
            )
            promo = await cursor.fetchone()
            
            if promo:
                await db.execute(
                    """UPDATE use_promokode_users 
                    SET chapter = 'want_talk_use' 
                    WHERE user_id = ? AND tag = ?""",
                    (user_id, promo['tag'])
                )
                await db.commit()

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        await bot.send_video(
            chat_id=user_id,
            video=id_video,
            caption="‚úÖ –î–æ—Å—Ç—É–ø –∫ –≤–µ–±–∏–Ω–∞—Ä—É –æ—Ç–∫—Ä—ã—Ç!",
            protect_content=True
        )

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ë–î (–≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è)
        await grant_content_access(
            user_id=user_id,
            content_id="Want_talk_one",
            days=30
        )
        await message.answer('–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–µ–±–µ–Ω–∞—Ä—É?', reply_markup=kb_main.my_web_want_talk)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

#–ß–µ–∫ –º–∞–≥–∞–∑–∏–Ω–∞ (—Å–∞–º–∏ –≤–∏–¥–µ–æ)
@router.callback_query(F.data == 'purchased_want_talk')
async def purchased_want_talk(callback: CallbackQuery):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å:', reply_markup=kb_main.parts_want_talk)
    await callback.answer()
#–ö—É–ø–ª–µ–Ω–Ω—ã–µ –≤–µ–±–∏–Ω–∞—Ä—ã ___

#–ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å
@router.callback_query(F.data == "purchades_want_talk_video_one")
async def send_purchased_videos_wt(callback: CallbackQuery, bot: Bot):

    sent_content = 0
    user_id = callback.from_user.id
    specific_content_id = "Want_talk_one"
    error_messages = []
    try:
        #–ù–∞—Ö–æ–¥ ID –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        id_video = Video_id_WT.get('want_talk_video_one')
        if not id_video:
            error_messages.append("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        
        id_audio = Audio_id_WT.get('want_talk_audio_one')
        if not id_audio:
            error_messages.append("‚ùå –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        
        text_caption_video = TXT_caption_WT.get('want_talk_caption_video_one')
        if not text_caption_video:
            error_messages.append("‚ùå –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        text_caption_audio = TXT_caption_WT.get('want_talk_caption_audio_one')
        if not text_caption_audio:
            error_messages.append("‚ùå –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if error_messages:
            error_text = "\n".join(error_messages) + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            await callback.message.answer(error_text)
            await callback.answer()  # –ó–∞–≤–µ—Ä—à–∞–µ–º callback
            return
        
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        async with aiosqlite.connect(db_Ibaza) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute( 
            '''SELECT content_id, protect_content 
            FROM content_access WHERE user_id = ? 
            AND content_id = ?
            and (datetime('now') < expires_at OR NULL)''', 
            (user_id, specific_content_id)) as cursor:
                content_access = await cursor.fetchone()  
                
            if not content_access:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            video_message = await bot.send_video(
                chat_id=user_id,
                video=id_video,
                caption=text_caption_video,
                protect_content=True 
            )

            sent_content += 1
            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –∫–Ω–æ–ø–∫–æ–π
            audio_message = await bot.send_audio(
                chat_id=user_id,
                audio=id_audio,
                caption=text_caption_audio,
                protect_content=True,
            )
            sent_content += 1

            #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
            if video_message:
                await asyncio.sleep(10)
                await bot.delete_message(
                    chat_id=user_id,
                    message_id=video_message.message_id
                )
                
            if audio_message:
                await bot.delete_message(
                    chat_id=user_id,
                    message_id=audio_message.message_id
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)
#–í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å
@router.callback_query(F.data == "purchades_want_talk_video_two")
async def send_purchased_videos_wt(callback: CallbackQuery, bot: Bot):

    sent_content = 0
    user_id = callback.from_user.id
    specific_content_id = "Want_talk_one"
    error_messages = []
    try:
        #–ù–∞—Ö–æ–¥ ID –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        id_video = Video_id_WT.get('want_talk_video_two')
        if not id_video:
            error_messages.append("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        
        id_audio = Audio_id_WT.get('want_talk_audio_two')
        if not id_audio:
            error_messages.append("‚ùå –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        
        text_caption_video = TXT_caption_WT.get('want_talk_caption_video_two')
        if not text_caption_video:
            error_messages.append("‚ùå –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        text_caption_audio = TXT_caption_WT.get('want_talk_caption_audio_two')
        if not text_caption_audio:
            error_messages.append("‚ùå –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if error_messages:
            error_text = "\n".join(error_messages) + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            await callback.message.answer(error_text)
            await callback.answer()  # –ó–∞–≤–µ—Ä—à–∞–µ–º callback
            return
        
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        async with aiosqlite.connect(db_Ibaza) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute( 
            '''SELECT content_id, protect_content 
            FROM content_access WHERE user_id = ? 
            AND content_id = ?
            and (datetime('now') < expires_at OR NULL)''', 
            (user_id, specific_content_id)) as cursor:
                content_access = await cursor.fetchone()  
                
            if not content_access:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            video_message = await bot.send_video(
                chat_id=user_id,
                video=id_video,
                caption=text_caption_video,
                protect_content=True 
            )

            sent_content += 1
            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –∫–Ω–æ–ø–∫–æ–π
            audio_message = await bot.send_audio(
                chat_id=user_id,
                audio=id_audio,
                caption=text_caption_audio,
                protect_content=True,
            )
            sent_content += 1

            #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
            if video_message:
                await asyncio.sleep(10)
                await bot.delete_message(
                    chat_id=user_id,
                    message_id=video_message.message_id
                )
                
            if audio_message:
                await bot.delete_message(
                    chat_id=user_id,
                    message_id=audio_message.message_id
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)
#–¢—Ä–µ—Ç–∏–µ –≤–∏–¥–µ–æ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å
@router.callback_query(F.data == "purchades_want_talk_video_three")
async def send_purchased_videos_three_wt(callback: CallbackQuery, bot: Bot):

    sent_content = 0
    user_id = callback.from_user.id
    specific_content_id = "Want_talk_one"
    error_messages = []
    try:
        #–ù–∞—Ö–æ–¥ ID –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        id_video = Video_id_WT.get('want_talk_video_three')
        if not id_video:
            error_messages.append("‚ùå –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        
        id_audio = Audio_id_WT.get('want_talk_audio_three')
        if not id_audio:
            error_messages.append("‚ùå –ê—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        
        text_caption_video = TXT_caption_WT.get('want_talk_caption_video_three')
        if not text_caption_video:
            error_messages.append("‚ùå –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        text_caption_audio = TXT_caption_WT.get('want_talk_caption_audio_three')
        if not text_caption_audio:
            error_messages.append("‚ùå –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if error_messages:
            error_text = "\n".join(error_messages) + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            await callback.message.answer(error_text)
            await callback.answer()  # –ó–∞–≤–µ—Ä—à–∞–µ–º callback
            return
        
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        async with aiosqlite.connect(db_Ibaza) as db:
            db.row_factory = aiosqlite.Row
            async with db.execute( 
            '''SELECT content_id, protect_content 
            FROM content_access WHERE user_id = ? 
            AND content_id = ?
            and (datetime('now') < expires_at OR NULL)''', 
            (user_id, specific_content_id)) as cursor:
                content_access = await cursor.fetchone()  
                
            if not content_access:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –º–∞—Ç–µ—Ä–∏–∞–ª—É", show_alert=True)
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            video_message = await bot.send_video(
                chat_id=user_id,
                video=id_video,
                caption=text_caption_video,
                protect_content=True 
            )

            sent_content += 1
            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å –∫–Ω–æ–ø–∫–æ–π
            audio_message = await bot.send_audio(
                chat_id=user_id,
                audio=id_audio,
                caption=text_caption_audio,
                protect_content=True,
            )
            sent_content += 1

            #–£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤
            if video_message:
                await asyncio.sleep(10)
                await bot.delete_message(
                    chat_id=user_id,
                    message_id=video_message.message_id
                )
                
            if audio_message:
                await bot.delete_message(
                    chat_id=user_id,
                    message_id=audio_message.message_id
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)


#–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –º–æ–∏ –≤–µ–±–∏–Ω–∞—Ä—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
@router.callback_query(F.data == 'go_to_the_webinar')
async def go_to_the_webinar_want_talk(callback: CallbackQuery):
    await callback.message.answer('–ö—É–ø–ª–µ–Ω–Ω—ã–µ –≤–µ–±–∏–Ω–∞—Ä—ã:', reply_markup=kb_main.Purchased_webinars)
    await callback.answer()
#–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≤–µ–±–∏–Ω–∞—Ä—É –•–û–ß–£ –≥–æ–≤–æ—Ä–∏—Ç—å
@router.callback_query(F.data == "webinare_want_talk")
async def webinare_want_talk_transition(callback: CallbackQuery):
    await callback.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å:', reply_markup=kb_main.parts_want_talk)

