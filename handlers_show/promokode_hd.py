from aiogram import Bot, types, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, SuccessfulPayment
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from pathlib import Path
from typing import Optional
from datetime import datetime, timedelta
import aiosqlite
from handlers_show.handlers_admin import is_admin
from bot.dao.database import save_payment, create_access_token, get_active_stream, create_access_token
import time, asyncio, os
import keyboards.keyboards_admin as kb_admin
from bot.dao.database import init_promokode
from handlers_show.__init__ import logger, router


DB_PATH = Path('data/streams.db')
DB_PROMOKODE = Path('data/promokode.db')


class NewPromokode(StatesGroup):
    percent = State()
    start_promokode = State()
    end_promokode = State()
    max_enteger = State()
    tag_promo = State()
    emoynt_enteger = State()

@router.message(F.text == 'new_promokode')
async def new_promokode_create(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    
    await message.answer(
        '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑:\n'
        '1. –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (1-98%)\n'
        '2. –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î)\n'
        '3. –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î)\n'
        '4. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n'
        '5. TAG –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å *)',
        reply_markup=kb_admin.new_promokode
    )

@router.callback_query(F.data == 'Want_talk_promokode')
async def want_create_promokode(callback: CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        return await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    await state.set_state(NewPromokode.percent)
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ (1-98) (–±–µ–∑ %) [–±–æ–ª–µ–µ 99, 100 –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –Ω–µ –≤–≤–æ–¥–∏—Ç—å]:")
    await callback.answer()

@router.message(NewPromokode.percent)
async def process_percent(message: Message, state: FSMContext):
    try:
        percent = int(message.text)
        if not 1 <= percent <= 100:
            raise ValueError
        await state.update_data(percent=percent)
        await state.set_state(NewPromokode.start_promokode)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")

@router.message(NewPromokode.start_promokode)
async def process_start_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(start_promokode=message.text)
        await state.set_state(NewPromokode.end_promokode)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")

@router.message(NewPromokode.end_promokode)
async def process_end_date(message: Message, state: FSMContext):
    try:
        datetime.strptime(message.text, "%Y-%m-%d")
        await state.update_data(end_promokode=message.text)
        await state.set_state(NewPromokode.max_enteger)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:")
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î")

@router.message(NewPromokode.max_enteger)
async def process_max_uses(message: Message, state: FSMContext):
    try:
        max_uses = int(message.text)
        if max_uses <= 0:
            raise ValueError
        await state.update_data(max_enteger=max_uses)
        await state.set_state(NewPromokode.tag_promo)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ TAG –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å *):")
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")

@router.message(NewPromokode.tag_promo)
async def process_tag_promo(message: Message, state: FSMContext):
    if not message.text.startswith('*'):
        await message.answer("TAG –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å *, –Ω–∞–ø—Ä–∏–º–µ—Ä: *–•–û–ß–£–î–ï–®–ï–í–õ–ï")
        return
    
    data = await state.get_data()
    chapter = 'want_talk'
    
    async with aiosqlite.connect(DB_PROMOKODE) as db:
        await db.execute(
            """INSERT INTO promokode_create 
            (percent, start_promokode, end_promokode, max_enteger, emoynt_enteger, tag, chapter) 
            VALUES (?, ?, ?, ?, 0, ?, ?)""",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º emoynt_enteger = 0
            (
                data['percent'],
                data['start_promokode'],
                data['end_promokode'],
                data['max_enteger'],
                message.text,  # TAG –ø—Ä–æ–º–æ–∫–æ–¥–∞
                chapter
            )
        )
        await db.commit()
    
    await message.answer(
        "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–ü—Ä–æ—Ü–µ–Ω—Ç: {data['percent']}%\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç —Å: {data['start_promokode']} –ø–æ {data['end_promokode']}\n"
        f"–ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {data['max_enteger']}\n"
        f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {message.text} –¥–ª—è –•–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å"
    )
    await state.clear()

@router.message(F.text == '–≤–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥')
async def use_promokode(message: Message):
    try:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:')
        
        @router.message()
        async def process_promocode(input_msg: Message):
            try:
                user_promocode = input_msg.text.strip().upper()
                user_id = input_msg.from_user.id
                current_date = datetime.now().date()
                
                async with aiosqlite.connect(DB_PROMOKODE) as db:
                    db.row_factory = aiosqlite.Row
                    
                    cursor = await db.execute(
                        "SELECT * FROM promokode_create WHERE tag = ?", 
                        (user_promocode,)
                    )
                    promocode = await cursor.fetchone()
                    
                    if not promocode:
                        await input_msg.answer('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω')
                        return
                    
                    try:
                        start_date = datetime.strptime(promocode['start_promokode'], "%Y-%m-%d").date()
                        end_date = datetime.strptime(promocode['end_promokode'], "%Y-%m-%d").date()
                        
                        if current_date < start_date:
                            await input_msg.answer(f'‚è≥ –ü—Ä–æ–º–æ–∫–æ–¥ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å {start_date.strftime("%d.%m.%Y")}')
                            return
                        
                        if current_date > end_date:
                            await input_msg.answer('‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫')
                            return
                    except ValueError as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã: {e}")
                        await input_msg.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞')
                        return
                    
                    cursor = await db.execute(
                        "SELECT COUNT(*) as count FROM promocode_usages WHERE promocode_tag = ?",
                        (promocode['tag'],)
                    )
                    uses_count = (await cursor.fetchone())['count']
                    
                    if uses_count >= int(promocode['max_enteger']):
                        await input_msg.answer('üö´ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—á–µ—Ä–ø–∞–Ω')
                        return
                    
                    cursor = await db.execute(
                        "SELECT COUNT(*) as count FROM use_promokode_users WHERE user_id = ? AND tag = ?",
                        (user_id, promocode['tag'])
                    )
                    already_used = (await cursor.fetchone())['count']
                    
                    if already_used:
                        await input_msg.answer('‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ')
                        return
                    
                    await db.execute(
                        "INSERT INTO promocode_usages (user_id, promocode_tag, use_date) VALUES (?, ?, ?)",
                        (user_id, promocode['tag'], current_date.isoformat())
                    )
                    
                    await db.execute(
                        "INSERT INTO use_promokode_users (user_id, percent, tag, chapter) VALUES (?, ?, ?, ?)",
                        (user_id, promocode['percent'], promocode['tag'], promocode['chapter'])
                    )
                    
                    await db.execute(
                        """UPDATE promokode_create 
                        SET emoynt_enteger = emoynt_enteger + 1 
                        WHERE tag = ?""",
                        (promocode['tag'],)
                    )

                    await db.commit()
                    
                    await input_msg.answer(
                        f'‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ "{promocode["tag"]}" –ø—Ä–∏–º–µ–Ω—ë–Ω!\n\n'
                        f'‚Ä¢ –°–∫–∏–¥–∫–∞: {promocode["percent"]}%\n'
                        f'‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {promocode["chapter"]}'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}", exc_info=True)
                await input_msg.answer('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞')
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ use_promokode: {e}", exc_info=True)
        await message.answer('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')