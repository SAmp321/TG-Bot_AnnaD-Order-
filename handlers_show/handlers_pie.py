from aiogram import F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, PreCheckoutQuery, LabeledPrice
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
from bot.dao.database import db_Ibaza
import logging
import aiosqlite
import keyboards.keyboards_admin as kb_admin
import keyboards.keyboards_main as kb_main
import keyboards.keyboards_shop as kb_shop
from bot.dao.database import (get_user_payments, check_payment, 
                            grant_content_access,)
import secrets
from datetime import datetime, timedelta
import time
from pathlib import Path
from handlers_show.__init__ import logger, router
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from data.reg import information_pie_bliss

DB_PROMOKODE = Path('data/promokode.db')
TARGET_CHAT_ID = -1002722473030

#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä—Ç–µ
@router.message(F.text == '–¢–û–†–¢ –ë–õ–ê–ñ–ï–ù–°–¢–í–û')
async def info_pie(message: Message, bot: Bot):
    error_messages = []
    user_id = message.chat.id
    try:
        #–ü—Ä–æ–≤–µ—Ä—è–º –∏ –∏–Ω–∏—Ñ–∏–∞–¥–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        id_photo = information_pie_bliss.get('photo_prevu_pie')
        if not id_photo:
            error_messages.append("‚ùå –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        
        id_caption = information_pie_bliss.get('text_caption_prevu_pie')
        if not id_caption:
            error_messages.append("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ")
        #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ—Ç
            if error_messages:
                error_text = "\n".join(error_messages) + "\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
                await message.answer(error_text)
                return
        
        #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        await bot.send_photo(
            chat_id= user_id,
            photo = id_photo,
            reply_markup=kb_main.pie_bliss_kb,
            protect_content=True,
            caption= id_caption
        )
    except Exception as e:
        logger.info(f'–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä—Ç–µ –±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ! {e}')
        message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!')

#–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ 
@router.callback_query(F.data == 'pay_for_pie_bliss')
async def handle_pay_for_content_rela(callback: CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or "NoUsername"
        base_amount = 88800  # 888.00 RUB –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        payload = "pie_bliss"
        payment_id = f"pay_{user_id}_{int(time.time())}"
        used_promo_tag = None
        discount_percent = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        async with aiosqlite.connect(DB_PROMOKODE) as db:
            db.row_factory = aiosqlite.Row
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ
            cursor = await db.execute(
                """SELECT up.tag, pc.percent 
                FROM use_promokode_users up
                JOIN promokode_create pc ON up.tag = pc.tag
                WHERE up.user_id = ? AND up.chapter = 'pie_bliss_buy'
                LIMIT 1""",
                (user_id,)
            )
            promo = await cursor.fetchone()
            
            if promo:
                used_promo_tag = promo['tag']
                discount_percent = promo['percent']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
                cursor = await db.execute(
                    """SELECT COUNT(*) as usage_count 
                    FROM promocode_usages 
                    WHERE promocode_tag = ?""",
                    (used_promo_tag,)
                )
                usage_data = await cursor.fetchone()
                usage_count = usage_data['usage_count'] if usage_data else 0
                
                cursor = await db.execute(
                    """SELECT max_enteger 
                    FROM promokode_create 
                    WHERE tag = ?""",
                    (used_promo_tag,)
                )
                promo_data = await cursor.fetchone()
                max_usage = promo_data['max_enteger'] if promo_data else 0
                
                if max_usage > 0 and usage_count >= max_usage:
                    # –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                    used_promo_tag = None
                    discount_percent = 0
                    await callback.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", show_alert=True)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        if used_promo_tag and discount_percent > 0:
            discount_amount = int(base_amount * discount_percent / 100)
            final_amount = base_amount - discount_amount
            discount_message = f" (—Å–∫–∏–¥–∫–∞ {discount_percent}%)"
        else:
            final_amount = base_amount
            discount_message = ""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        if used_promo_tag:
            async with aiosqlite.connect(DB_PROMOKODE) as db:
                await db.execute(
                    """INSERT INTO pending_promo_updates 
                    (user_id, promo_tag, payment_id) 
                    VALUES (?, ?, ?)""",
                    (user_id, used_promo_tag, payment_id)
                )
                await db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await bot.send_invoice(
            chat_id=user_id,
            title=f'—Ç–æ—Ä—Ç –±–ª–∞–∂–µ–Ω—Å—Ç–≤–æ"{discount_message}',
            description='–î–æ—Å—Ç—É–ø –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞',
            payload=payload,
            provider_token='381764678:TEST:129002',
            currency='RUB',
            prices=[LabeledPrice(label='–î–æ—Å—Ç—É–ø –∫ –∫—É—Ä—Å—É', amount=final_amount)],
            need_email=True
        )
        await callback.answer()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_pay_for_content: {e}")
        await callback.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ –ª–∏ –ø–ª–∞—Ç—ë–∂–∫–∞
@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot) -> None:
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

#–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
async def create_chat_invite_link(bot: Bot):
    #–°–æ–∑–¥–∞–µ—Ç –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –¥–ª—è –±–µ—Å–µ–¥—ã
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫—É –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ô –ë–ï–°–ï–î–´
        invite_link = await bot.create_chat_invite_link(
            chat_id=TARGET_CHAT_ID,
            name=f"invite_{secrets.token_hex(8)}",
            expire_date=datetime.now() + timedelta(hours=24),
            member_limit=1,  # –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è
            creates_join_request=False  # –ü—Ä—è–º–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –∞ –Ω–µ –∑–∞–ø—Ä–æ—Å
        )
        return invite_link.invite_link
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç-—Å—Å—ã–ª–∫–∏: {e}")
        raise

#–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∫–∏ —Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç
@router.message(F.successful_payment.invoice_payload == "pie_bliss")
async def process_successful_payment(message: Message, bot: Bot):
    try:
        user_id = message.from_user.id
        invite_link = await create_chat_invite_link(bot)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        async with aiosqlite.connect('database.db') as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS chat_invites (
                    id INTEGER PRIMARY KEY,
                    user_id INTEGER,
                    chat_id INTEGER,
                    invite_link TEXT,
                    used BOOLEAN DEFAULT 0,
                    created_at DATETIME
                )
            ''')
            
            await db.execute(
                '''INSERT INTO chat_invites 
                (user_id, chat_id, invite_link, created_at) 
                VALUES (?, ?, ?, ?)''',
                (user_id, TARGET_CHAT_ID, invite_link, datetime.now())
            )
            await db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –ù–ê –ë–ï–°–ï–î–£
        await message.answer(
            "üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É:\n"
            f"üëâ {invite_link}\n\n"
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!",
            protect_content=True
        )

        #–û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        async with aiosqlite.connect(DB_PROMOKODE) as db:
            db.row_factory = aiosqlite.Row
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cursor = await db.execute(
                """SELECT tag FROM use_promokode_users 
                WHERE user_id = ? AND chapter = 'pie_bliss'
                LIMIT 1""",
                (user_id,)
            )
            promo = await cursor.fetchone()
            
            if promo:
                await db.execute(
                    """UPDATE use_promokode_users 
                    SET chapter = 'pie_bliss_use' 
                    WHERE user_id = ? AND tag = ?""",
                    (user_id, promo['tag'])
                )
                await db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
        await grant_content_access(
            user_id=user_id,
            content_id="pie_bliss",
            days=30
        )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    