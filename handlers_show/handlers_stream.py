from aiogram import Bot, types, F
from aiogram.types import Message, CallbackQuery, LabeledPrice, SuccessfulPayment
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from pathlib import Path
from typing import Optional
from datetime import datetime, timedelta
import aiosqlite
from handlers_show.handlers_admin import is_admin
from bot.dao.database import save_payment, create_access_token, get_active_stream, create_access_token
import time, asyncio, os
import keyboards.keyboards_admin as kb_admin
from bot.dao.database import init_db
from handlers_show.__init__ import logger, router


DB_PATH = Path('data/streams.db')
DB_PROMOKODE = Path('data/promokode.db')

#–≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ –ø–ª–∞—Ç—ë–∂–∫–∏ –≤ –ë–î
class NewStream(StatesGroup):
    NAME = State()
    PRICE = State()
    DESCRIPTION = State()
    CHAT_ID = State()
    START_TIME = State()
    END_TIME = State()
    INVITE_LINK = State()

def extract_chat_id_from_link(invite_link: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç chat_id –∏–∑ invite-—Å—Å—ã–ª–∫–∏"""
    try:
        # –î–ª—è —Å—Å—ã–ª–æ–∫ –≤–∏–¥–∞ https://t.me/c/1234567890
        if "/c/" in invite_link:
            chat_part = invite_link.split("/c/")[1]
            if chat_part.isdigit():
                return int(f"-100{chat_part}")
        
        # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö invite-—Å—Å—ã–ª–æ–∫
        # (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å chat_id –¥–ª—è approve_chat_join_request)
        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
        return None
    except Exception:
        return None

@router.message(Command("start_stream"))
async def start_stream_creation(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        
    await state.set_state(NewStream.NAME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∞:")

@router.message(NewStream.NAME)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(NewStream.PRICE)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 299.99):")

@router.message(NewStream.PRICE)
async def process_price(message: Message, state: FSMContext):
    try:
        rub = float(message.text)
        kopek = int(rub * 100)
        await state.update_data(amount_kopek=kopek)
        await state.set_state(NewStream.DESCRIPTION)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∏–º–∞:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

@router.message(NewStream.DESCRIPTION)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(payload=message.text)
    await state.set_state(NewStream.CHAT_ID)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è —Å—Ç—Ä–∏–º–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100):")

@router.message(NewStream.CHAT_ID)
async def process_chat_id(message: Message, state: FSMContext):
    await state.update_data(chat_id=message.text)
    await state.set_state(NewStream.START_TIME)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")

@router.message(NewStream.START_TIME)
async def process_start_time(message: Message, state: FSMContext):
    try:
        start = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(start_time=start)
        await state.set_state(NewStream.END_TIME)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):")
    except ValueError:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")

@router.message(NewStream.END_TIME)
async def process_end_time(message: Message, state: FSMContext):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        end_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if end_time <= data['start_time']:
            await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!")
            return

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º invite-—Å—Å—ã–ª–∫—É
        await state.update_data(end_time=end_time)
        await state.set_state(NewStream.INVITE_LINK)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
        instructions = [
            "üìå –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å invite-—Å—Å—ã–ª–∫—É –¥–ª—è —á–∞—Ç–∞:",
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞",
            "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏'",
            "3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è)",
            "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –º–Ω–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
            "",
            "‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/ –∏–ª–∏ t.me/"
        ]
        
        await message.answer("\n".join(instructions))
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_end_time: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@router.message(NewStream.INVITE_LINK)
async def process_invite_link(message: Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫—É
        if not (message.text.startswith("https://t.me/") or message.text.startswith("t.me/")):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞! –î–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://t.me/")
            return
            
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É
        invite_link = message.text.replace("t.me/", "https://t.me/")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        async with aiosqlite.connect(DB_PATH) as db:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–∏–º—ã
            await db.execute("UPDATE streams SET is_active = 0")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–º
            await db.execute(
                """INSERT INTO streams 
                (name, amount_kopek, payload, chat_id, start_time, end_time, invite_link, is_active) 
                VALUES (?, ?, ?, ?, ?, ?, ?, 1)""",
                (
                    data['name'],
                    data['amount_kopek'],
                    data['payload'],
                    data['chat_id'],
                    data['start_time'].isoformat(),
                    data['end_time'].isoformat(),
                    invite_link
                )
            )
            await db.commit()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Å–æ–∑–¥–∞–Ω–∏–∏
        report = [
            "‚úÖ –°—Ç—Ä–∏–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}",
            f"üíµ –¶–µ–Ω–∞: {data['amount_kopek'] / 100:.2f} —Ä—É–±.",
            f"üÜî ID —á–∞—Ç–∞: {data['chat_id']}",
            f"üïí –ü–µ—Ä–∏–æ–¥: {data['start_time'].strftime('%d.%m.%Y %H:%M')} - {data['end_time'].strftime('%d.%m.%Y %H:%M')}",
            f"üîó –°—Å—ã–ª–∫–∞: {invite_link}",
            "",
            "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
        ]
        
        await message.answer("\n".join(report))
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_invite_link: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@router.callback_query(F.data == "pay_stream")
async def process_payment(callback: CallbackQuery, bot: Bot):
    try:
        user_id = callback.from_user.id
        username = callback.from_user.username or "NoUsername"
        used_promo_tag = None
        discount_percent = 0
        
        async with aiosqlite.connect(DB_PATH) as db:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º
            cursor = await db.execute("""
                SELECT id, name, amount_kopek, payload, chat_id 
                FROM streams 
                WHERE is_active = 1 
                AND datetime(start_time) <= datetime('now', 'localtime') 
                AND datetime(end_time) >= datetime('now', 'localtime')
                LIMIT 1
            """)
            stream = await cursor.fetchone()
            
        if not stream:
            return await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤", show_alert=True)
        
        stream_id, name, base_amount, payload, chat_id = stream
        payment_id = f"stream_{stream_id}_{user_id}_{int(time.time())}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        async with aiosqlite.connect(DB_PROMOKODE) as db:
            db.row_factory = aiosqlite.Row
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–µ
            cursor = await db.execute(
                """SELECT up.tag, pc.percent 
                FROM use_promokode_users up
                JOIN promokode_create pc ON up.tag = pc.tag
                WHERE up.user_id = ? AND up.chapter = 'stream'
                LIMIT 1""",
                (user_id,)
            )
            promo = await cursor.fetchone()
            
            if promo:
                used_promo_tag = promo['tag']
                discount_percent = promo['percent']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
                cursor = await db.execute(
                    """SELECT COUNT(*) as usage_count 
                    FROM promocode_usages 
                    WHERE promocode_tag = ?""",
                    (used_promo_tag,)
                )
                usage_data = await cursor.fetchone()
                usage_count = usage_data['usage_count'] if usage_data else 0
                
                cursor = await db.execute(
                    """SELECT max_enteger 
                    FROM promokode_create 
                    WHERE tag = ?""",
                    (used_promo_tag,)
                )
                promo_data = await cursor.fetchone()
                max_usage = promo_data['max_enteger'] if promo_data else 0
                
                if max_usage > 0 and usage_count >= max_usage:
                    # –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–ª –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                    used_promo_tag = None
                    discount_percent = 0
                    await callback.answer("‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω", show_alert=True)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É —Å —É—á–µ—Ç–æ–º —Å–∫–∏–¥–∫–∏
        if used_promo_tag and discount_percent > 0:
            discount_amount = int(base_amount * discount_percent / 100)
            final_amount = base_amount - discount_amount
            discount_message = f" (—Å–∫–∏–¥–∫–∞ {discount_percent}%)"
        else:
            final_amount = base_amount
            discount_message = ""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        if used_promo_tag:
            async with aiosqlite.connect(DB_PROMOKODE) as db:
                await db.execute(
                    """INSERT INTO pending_promo_updates 
                    (user_id, promo_tag, payment_id) 
                    VALUES (?, ?, ?)""",
                    (user_id, used_promo_tag, payment_id)
                )
                await db.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
        await bot.send_invoice(
            chat_id=user_id,
            title=f"–î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∏–º—É: {name}{discount_message}",
            description=payload,
            payload=payment_id,
            provider_token='381764678:TEST:129002',
            currency="RUB",
            prices=[LabeledPrice(label=name, amount=final_amount)],
            need_email=True,
            protect_content=True
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_payment: {e}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.message(F.successful_payment.invoice_payload.startswith("stream_"))
async def handle_successful_payment(message: Message, bot: Bot):
    try:
        payment = message.successful_payment
        user_id = message.from_user.id

        #—á–µ–∫ –ø—Ä–æ–º–æ
        async with aiosqlite.connect(DB_PROMOKODE) as db:
            db.row_factory = aiosqlite.Row
            
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            cursor = await db.execute(
                """SELECT tag FROM use_promokode_users 
                WHERE user_id = ? AND chapter = 'stream'
                LIMIT 1""",
                (user_id,)
            )
            promo = await cursor.fetchone()
            
            if promo:
                await db.execute(
                    """UPDATE use_promokode_users 
                    SET chapter = 'stream_use' 
                    WHERE user_id = ? AND tag = ?""",
                    (user_id, promo['tag'])
                )
                await db.commit()

        # 1. –ü–∞—Ä—Å–∏–º payload
        parts = payment.invoice_payload.split('_')
        if len(parts) != 4:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload")
        stream_id = int(parts[1])

        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∏–º–µ –∏–∑ –ë–î
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                "SELECT invite_link FROM streams WHERE id = ?", 
                (stream_id,)
            )
            stream = await cursor.fetchone()
            
        if not stream or not stream[0]:
            raise ValueError("–°—Ç—Ä–∏–º –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç invite-—Å—Å—ã–ª–∫–∞")
            
        invite_link = stream[0]

        # 3. –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        try:
            # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ invite-—Å—Å—ã–ª–∫–∏
            chat_id = extract_chat_id_from_link(invite_link)
            if chat_id:
                await bot.approve_chat_join_request(
                    chat_id=chat_id,
                    user_id=user_id
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")

        # 4. –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é invite-—Å—Å—ã–ª–∫—É
        response = [
            "üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
            f"üíµ –°—É–º–º–∞: {payment.total_amount / 100:.2f} RUB",
            "",
            "üîó –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —á–∞—Ç:",
            f"{invite_link}",
            "",
            "–ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å —Å—Ä–∞–∑—É –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ"
        ]
        
        await message.answer("\n".join(response))
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

@router.message(CommandStart(deep_link=True))
async def handle_deep_link(message: Message, bot: Bot):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ deep link (—Ñ–æ—Ä–º–∞—Ç: /start join_<token>)
        token = message.text.split()[1].split('_')[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –≤ –ë–î
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–∫–µ–Ω –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å—Ç—Ä–∏–º
            cursor = await db.execute("""
                SELECT a.user_id, a.stream_id, s.chat_id 
                FROM access_tokens a
                JOIN streams s ON a.stream_id = s.id
                WHERE a.token = ? 
                AND a.used = 0
                AND datetime(a.expires_at) > datetime('now')
            """, (token,))
            data = await cursor.fetchone()
            
            if not data:
                return await message.answer("‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞")
            
            user_id, stream_id, chat_id = data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            if user_id != message.from_user.id:
                return await message.answer("‚ùå –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
            # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            await db.execute(
                "UPDATE access_tokens SET used = 1 WHERE token = ?",
                (token,)
            )
            await db.commit()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
        try:
            await bot.add_chat_member(
                chat_id=chat_id,
                user_id=user_id,
                until_date=int((datetime.now() + timedelta(days=1)).timestamp()))
            
            await message.answer(
                f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç —Å—Ç—Ä–∏–º–∞!\n"
                f"–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: https://t.me/c/{chat_id[4:]}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ —á–∞—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=kb_admin.support_kb()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ deep link: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏")

@router.message(Command("i"))
async def get_chat_id(message: Message):
    chat_id = message.chat.id
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø (-100...)
    if str(chat_id).startswith('-'):
        supergroup_id = f"-100{str(chat_id)[4:]}" if str(chat_id).startswith('-100') else f"-100{str(chat_id)[1:]}"
    else:
        supergroup_id = f"-100{chat_id}"
    
    await message.answer(
        f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{chat_id}</code>\n\n"
        f"–î–ª—è —Å—Ç—Ä–∏–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID: <code>{supergroup_id}</code>",
        parse_mode="HTML"
    )

@router.callback_query(F.data == "stream_info")
async def stream_info(callback: CallbackQuery, state: FSMContext):
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute(
                """SELECT name, amount_kopek, payload, start_time, end_time
                FROM streams 
                WHERE is_active = 1 
                ORDER BY start_time DESC 
                LIMIT 1"""  # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω—É—é —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é
            )
            stream = await cursor.fetchone()  # –ø–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–ø–∏—Å—å
            name, amount_kopek, payload, start_time, end_time = stream  # —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä—Ç–µ–∂
            end_time_str = str(end_time)

        if datetime.now() > datetime.fromisoformat(end_time_str):
            await callback.message.answer('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–æ–≤, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏')
            await callback.answer()
            return
        
        
        await callback.message.answer(
            f"üé• –¢—Ä–∞–Ω—Å–ª—è—Ü–∏—è: {name}  | {payload}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {amount_kopek / 100} —Ä—É–±.\n"
            f"‚è∞ –ù–∞—á–∞–ª–æ: {start_time}\n"
            f"üîö –ö–æ–Ω–µ—Ü: {end_time}\n"
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer()