
from handlers_show.__init__ import router, logger
from aiogram import F, types, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import keyboards.keyboards_main as kb_main
import keyboards.keyboards_admin as kb_admin
import aiosqlite as aiosq
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
import aiosqlite
import asyncio
import logging
from pathlib import Path
from bot.dao.database import get_all_users
from aiogram.types import ReplyKeyboardRemove

db_Ibaza = Path('data/info_baza.db')

#–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
async def is_admin(user_id: int) -> bool:
    try:
        async with aiosqlite.connect(db_Ibaza) as conn:
            cursor = await conn.execute("SELECT 1 FROM admin WHERE user_id = ?", (user_id,))
            admin = await cursor.fetchone()
            return bool(admin)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
        return False

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –±–¥ –∞–¥–º–∏–Ω–æ–≤
async def get_admin_info_name(user_id: int):
    try:
        async with aiosqlite.connect(db_Ibaza) as conn:
            cursor = await conn.execute(
                "SELECT username FROM admin WHERE user_id = ?",
                (user_id,)
            )
            row = await cursor.fetchone()
            return row[0] if row else None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∞: {e}")
        return None

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –≤—Ö–æ–¥
@router.message(F.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è')
async def admin_command(message: Message):
    if not await is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    admin_username = await get_admin_info_name(message.from_user.id)
    
    if admin_username:
        await message.answer(f"üëë –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {admin_username}!", reply_markup=kb_admin.main_admin_kb)
    else:
        await message.answer("üîê –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

async def info_stats_sell(user_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    async with aiosq.connect(db_Ibaza) as conn:
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
            cursor = await conn.execute(
                'SELECT COUNT(*) FROM payments WHERE user_id = ?', 
                (user_id,)
            )
            total_sales = (await cursor.fetchone())[0] or 0  # –ï—Å–ª–∏ NULL ‚Üí 0

            cursor = await conn.execute(
                'SELECT SUM(amount) FROM payments WHERE user_id = ?',
                (user_id,)
            )
            sum_result = await cursor.fetchone()
            total_amount = (sum_result[0] / 100) if sum_result and sum_result[0] is not None else 0

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞
            cursor = await conn.execute(
                'SELECT payload FROM payments WHERE user_id = ? ORDER BY rowid DESC LIMIT 1',
                (user_id,)
            )
            last_payload_result = await cursor.fetchone()
            last_payload = last_payload_result[0] if last_payload_result else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            return {
                'total_sales': total_sales,
                'total_amount': total_amount,
                'last_payload': last_payload
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ [beta]')
async def stats_for_sell(message: Message):
    if not await is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    stats = await info_stats_sell(message.from_user.id)
    
    if not stats:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    response = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {stats['total_sales']}\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']} —Ä—É–±.\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä: {stats['last_payload']}"
    )
    
    await message.answer(response)

# –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@router.message(F.text == '–í—ã–π—Ç–∏')
async def Exit_for_admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    await message.answer('–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', reply_markup=kb_main.main_kb)

#–ì—Ä—É–ø–ø–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_content = State()

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
@router.message(F.text == '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')
async def broadcast_start(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    
    await message.answer(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç\n‚Ä¢ –§–æ—Ç–æ/–≤–∏–¥–µ–æ/GIF —Å –ø–æ–¥–ø–∏—Å—å—é\n‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–¥–ø–∏—Å—å—é\n\n"
        "–ü–æ–¥–ø–∏—Å—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(BroadcastStates.waiting_for_content)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(BroadcastStates.waiting_for_content)
async def broadcast_content_received(message: Message, state: FSMContext, bot: Bot):
    if not await is_admin(message.from_user.id):
        await state.clear()
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    
    users = get_all_users()
    success_count = 0
    fail_count = 0
    
    status_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...")
    
    for user_id in users:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if message.photo:
                # –§–æ—Ç–æ
                photo_file_id = message.photo[-1].file_id
                caption = message.caption or ""
                await bot.send_photo(user_id, photo_file_id, caption=caption)
                
            elif message.video:
                # –í–∏–¥–µ–æ
                video_file_id = message.video.file_id
                caption = message.caption or ""
                await bot.send_video(user_id, video_file_id, caption=caption)
                
            elif message.animation:
                # GIF (–∞–Ω–∏–º–∞—Ü–∏—è)
                animation_file_id = message.animation.file_id
                caption = message.caption or ""
                await bot.send_animation(user_id, animation_file_id, caption=caption)
                
            elif message.document:
                # –î–æ–∫—É–º–µ–Ω—Ç
                document_file_id = message.document.file_id
                caption = message.caption or ""
                await bot.send_document(user_id, document_file_id, caption=caption)
                
            elif message.text:
                # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                await bot.send_message(user_id, message.text)
                
            else:
                # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
                continue
                
            success_count += 1
            await asyncio.sleep(0.15)  # Anti-flood
            
        except Exception as e:
            fail_count += 1
            logging.error(f"Error sending to {user_id}: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    content_type = "—Ç–µ–∫—Å—Ç"
    if message.photo:
        content_type = "—Ñ–æ—Ç–æ"
    elif message.video:
        content_type = "–≤–∏–¥–µ–æ"
    elif message.animation:
        content_type = "GIF"
    elif message.document:
        content_type = "–¥–æ–∫—É–º–µ–Ω—Ç"
    
    await status_msg.edit_text(
        f"üìä –†–∞—Å—Å—ã–ª–∫–∞ {content_type} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {fail_count}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}"
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–∞—Å—Å—ã–ª–∫–∏
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def cancel_broadcast(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state == BroadcastStates.waiting_for_content:
        await state.clear()
        await message.answer(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=ReplyKeyboardRemove()
        )