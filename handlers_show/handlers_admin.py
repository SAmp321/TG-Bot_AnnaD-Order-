
from handlers_show.__init__ import router, logger
from aiogram import F, types
from aiogram.types import Message
from aiogram.filters import CommandStart, Command, CommandObject
import keyboards.keyboards_main as kb_main
import keyboards.keyboards_admin as kb_admin
from bot.dao.database import db_Ibaza
import aiosqlite as aiosq
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞
async def is_admin(user_id: int) -> bool:
    admin = await db_Ibaza.fetch_one("SELECT 1 FROM admin WHERE user_id = ?", (user_id,))
    return bool(admin)

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–∑ –±–¥ –∞–¥–º–∏–Ω–æ–≤
async def get_admin_info_name(user_id: int):
    async with aiosq.connect(db_Ibaza) as conn:
        cursor = await conn.execute(
            "SELECT username FROM admin WHERE user_id = ?",
            (user_id,)
        )
        row = await cursor.fetchone()
        return row[0] if row else None

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@router.message(F.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∞—è')
async def admin_command(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    admin_username = await get_admin_info_name(message.from_user.id)
    
    if admin_username:
        await message.answer(f"üëë –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {admin_username}!", reply_markup=kb_admin.main_admin_kb)
    else:
        await message.answer("üîê –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")

async def info_stats_sell(user_id: int):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂"""
    async with aiosq.connect(db_Ibaza) as conn:
        try:
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂
            cursor = await conn.execute(
                'SELECT COUNT(*) FROM payments WHERE user_id = ?', 
                (user_id,)
            )
            total_sales = (await cursor.fetchone())[0] or 0  # –ï—Å–ª–∏ NULL ‚Üí 0

            cursor = await conn.execute(
                'SELECT SUM(amount) FROM payments WHERE user_id = ?',
                (user_id,)
            )
            sum_result = await cursor.fetchone()
            total_amount = (sum_result[0] / 100) if sum_result and sum_result[0] is not None else 0

            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–¥–∞–∂–∞
            cursor = await conn.execute(
                'SELECT payload FROM payments WHERE user_id = ? ORDER BY rowid DESC LIMIT 1',
                (user_id,)
            )
            last_payload_result = await cursor.fetchone()
            last_payload = last_payload_result[0] if last_payload_result else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

            return {
                'total_sales': total_sales,
                'total_amount': total_amount,
                'last_payload': last_payload
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return None

@router.message(Command('stats_for_sell'))
async def stats_for_sell(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    stats = await info_stats_sell(message.from_user.id)
    
    if not stats:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    response = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–∂: {stats['total_sales']}\n"
        f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']} —Ä—É–±.\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä: {stats['last_payload']}"
    )
    
    await message.answer(response)

@router.message(Command('Exit'))
async def Exit_for_admin_panel(message: Message):
    if not is_admin(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    await message.answer('–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏', reply_markup=kb_main.main_kb)



